C언어

프로그램 : 소스코드로 잘 짜여진 틀
소스코드 : 컴퓨터와 개발자가 소통한 명령어

	프로그램
	OS(운영체제)
	하드웨어

프로그래밍 언어
		프로그램을 제작할 수 있는 언어
		운영체제와 개발자가 소통을 할 수 있는 문법을 가진 언어이다.

C언어 소개
		1972년부터 사용된 오래된 언어이다.
		그 때 당시 메모리 용량이 작았기 때문에
		메모리를 효율적으로 관리하기 위한 목적이 강하다.
		하드웨어를 직접 제어할 수 있기 때문에 강력한 언어이며,
		개발자를 믿는 언어.
		모바일 개발도 가능하긴 하지만 애플리케이션이 잘못되면
		핸드폰도 망가지기 때문에 선호하지 않는다.

컴파일러 : 번역기, 컴파일을 해주는 것
컴파일 : 사람의 언어를 컴퓨터 언어로 해석해주는 작업

2강
프로젝트 만들기
		솔루션
				프로젝트
						소스파일(.c)
								소스코드

Day03

RAM(메모리)
=================
OS Kernel Space			 :드라이버
=================
Stack					:지역변수, 매개변수
=================
Heap					:동적 메모리
=================
BSS					:초기화 되지 않은 전역변수
=================
Data 영역				:전역변수, 정적변수(static)
=================
Text					:상수, 코드
=================



변수 : 저장공간
	x		=		10
     저장공간의    대입     값(상수)
     이름       	연산자


자료형(저장공간의 종류 - type)

* : 기본형
자료형 	type	byte			값	

정수형	*int	4			3,5,-234,123,...
		long	4(32bit),8(64bit)	3,5L,-234L,123L,...
실수형	float	4			3.0F,0.0F,-456.516F,...			
		*double	8			3.0,0.0,-456.516,...	
문자형	char	1			'a','A','0',...
문자열	??	?			"abc","ABC","김","이름",...

변수의 선언
	자료형 변수명 = 값;
	int x = 10;

Day05
변수의 선언
		자료형 변수명 = 초기값;
		자료형 변수명;

변수 선언시 주의사항
		같은 이름의 변수를 선언할 수 없다.
		초기화를 해준다.
		선언부에 한꺼번에 선언한다.

변수명 주의사항
		문자부터 시작한다.
		특수문자를 쓸 수 없다(단, _는 가능)
		공백을 사용할 수 없다.
		되도록 소문자만 사용한다.
		goodBoy : 카멜 표기법
		명사로 사용한다.
		되도록 한글은 사용하지 않는다.
		
변수 선언 시 RAM
		int x = 0;
		x라는 이름의 저장공간이 RAM에 할당되고,
		고유한 값인 주소값이 부여된다.


주소
		저장공간이 RAM에 할당되면, 유일무이한 값인
		주소값이 부여되고, 변수명으로 검색하는 것 보다 
		상대적으로 빠르다.

출력함수에서의 사용
		printf("");

서식문자(format)
		반드시 따옴표 안에서 작성한다.

		%d : decimal(10진수 정수)
		%o : ocatal(8진수 정수)
		%x : haxadecimal(16진수 정수)
		%f : float(실수, float)
		%lf : long float(실수, double)
		%c : charater(문자)
		%s : string(문자열)

day06
변수를 사용하는 이유
	1. 반복되는 값을 쉽게 관리하기 위해서
	2. 값에 의미 부여를 하기 위해서

형변환
	자료형을 변환하는 기법
	- 자동 형변환
		정수와 정수를 연산 : 정수
		정수와 실수를 연산 : 실수
		문자를 정수에, 정수를 문자에

	- 강제 형변환
		(자료형)값
		(int)3.556==3

day08
입력 함수
		입력상태: 커서가 깜빡이고 있는 상태
		입력받기 전에 출력을 사용하여 어떤 정보를 입력해야할지 알려줘야 한다.
		
scanf_s("입력받을 값의 서식 문자", &입력받은 값을 저장할 변수명, 변수의 크기)


day09
헤더 파일
		항상 C언어 파일 상단에서 사용하기 때문에 "헤더 파일"이라고 한다.
		헤더파일을 추가하는 방법은 2가지가 있다.
		1. <헤더파일.h> : 라이브러리에 이미 있는 헤더파일
		2. "헤더파일.h" : 사용자가 직접 만든 헤더파일
------------------------------------------------------------------------------------------------------
연산자 
		기능이 있는 특수문자

연산자 우선순위
		최우선 연산자
		단항 연산자
		산술 연산자
		쉬프트 연산자
		관계 연산자
		논리 연산자
		삼항 연산자
		대입 연산자

결합성 
		하나의 수식에 동일한 연산자가 있다면, 해당 연산자의 방향에 맞게 
		결합되어 연산되는 성질


day10
비트 연산
		
		논리 연산자
		& AND, 논리곱 : a&b 두 비트 모두 1이면 1
		| OR, 논리합 : a|b 두 비트 중 하나라도 1이면 1
		^ XOR, 배타논리합 : a^b 두 비트가 서로 다르면 1

		단항 연산자
		~NOT, 논리 부정 : ~a, 1을 0으로, 0을 1로 반대로 바꿔준다
	
		쉬프트 연산자 : 빈 자리는 0으로 채워지고(음수 1로) 비트가 넘어가면 잘린다
		<< 좌쉬프트 : a<<b, a를 b만큼 좌로 비트이동
		>> 우쉬프트 : a>>b, a를 b만큼 우로 비트이동


day11
조건식
		참 또는 거짓, 둘 중 하나가 나오는 식
		참 또는 거짓이라는 값.

참과 거짓을 나타내는 값
		거짓 : 0
		참 : 0 이외의 모든 수 , 1로 약속한다.

연산자
		관계 연산자 
		==		: 같다
		!=		: 같지 않다
		>,< 		: 초과, 미만
		>=,<=	: 이상, 이하

		논리 연산자: 두개 이사의 조건식을 연결할 때
		&& : AND, 두 조건식 모두 참일 때 참 -> A && B
		|| : OR, 둘 중 하나라도 참이면 참  -> A || B

		단항 연산자
		! : NOT, 거짓을 참으로, 참을 거짓으로 변경, !A
 		

day12
삼항 연산자(?:)
	조건식? 참:거짓
	10>11 ? 10:11
	
	삼항 연산자에서 참, 거짓자리에 값을 작성하면, 
	상항 연산자 통채로는 참 또는 거짓에 작성한 값으로 봐야한다.

day13
제어문
1. 조건문

-if문
if(조건식){
	실행할 문장;
}
위의 조건식의 결과가 상관없이 모두 검사
if(조건식){
	실행할 문장;
}
if(조건식){
	실행할 문장;
}
===========================================
if(조건식){
	실행할 문장;
}
위의 조건식이 참이 아니면 순차적으로 검사
else if(조건식){
	실행할 문장;
}
else{
	실행할 문장
}

-switch문













	





		
